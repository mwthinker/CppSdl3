#!/usr/bin/env python3
import subprocess
import pathlib
import argparse
import sys
from typing import Dict

DXC = "dxc"  # Adjust path if needed

LINE_WIDTH = 50  # Number of bytes per line in the output header

def compile_shader(entry: str, target: str, ext: str, hlsl_file: str, verbose: bool = False) -> bytes:
    out = f"build/{entry}.{ext}"
    args = [DXC, "-E", entry, "-T", target, "-Fo", out, hlsl_file]
    if ext == "spv":
        args.insert(1, "-spirv")
        args += ["-fspv-target-env=vulkan1.2"]
    if verbose:
        print("Running:", " ".join(args))
    
    try:
        result = subprocess.run(args, check=True, capture_output=True, text=True)
        return pathlib.Path(out).read_bytes()
    except subprocess.CalledProcessError as e:
        print(f"Error compiling shader {entry} ({target}) to {ext}:", file=sys.stderr)
        print(f"Command: {' '.join(args)}", file=sys.stderr)
        if e.stdout:
            print(f"{e.stdout}", file=sys.stderr)
        if e.stderr:
            print(f"{e.stderr}", file=sys.stderr)
        sys.exit(1)

def to_pascal_case(name: str) -> str:
    """Convert a string with dots, underscores, or hyphens to PascalCase."""
    # Split on common separators and filter out empty strings
    parts = [part for part in name.replace('.', '_').replace('-', '_').split('_') if part]
    # Capitalize each part and join
    return ''.join(part.capitalize() for part in parts)

def emit_cpp_header(shader_blobs: Dict[str, bytes], output_header: str, namespace: str, guard_prefix: str = "") -> None:
    with open(output_header, "w") as f:
        if guard_prefix:
            filename_upper = pathlib.Path(output_header).stem.upper()
            # Sanitize filename by removing dots and other illegal characters
            filename_sanitized = filename_upper.replace('.', '').replace('-', '')
            guard = f"{guard_prefix}_{filename_sanitized}_H"
            header_content = f"""\
#ifndef {guard}
#define {guard}

// Generated by compile_shaders.py. Do not edit manually.
#include <SDL3/SDL_gpu.h>

#include <cstdint>
#include <array>

"""
        else:
            header_content = """\
#pragma once

// Generated by compile_shaders.py. Do not edit manually.
#include <SDL3/SDL_gpu.h>

#include <cstdint>
#include <array>

"""
        f.write(header_content)
        
        if namespace:
            f.write(f"namespace {namespace} {{\n\n")
        
        for name, blob in shader_blobs.items():
            pascal_name = to_pascal_case(name)
            array_name = f"{pascal_name}Bytes"
            indent = "\t" if namespace else ""
            f.write(f"{indent}constexpr std::array<uint8_t, {len(blob)}> {array_name}{{\n")
            for i, byte in enumerate(blob):
                if i % LINE_WIDTH == 0:
                    f.write(f"{indent}\t")
                f.write(f"{byte:3d},")
                if (i + 1) % LINE_WIDTH == 0:
                    f.write("\n")
            f.write(f"\n{indent}}};\n\n")

        if namespace:
            f.write(f"}}\n\n")
        
        if guard_prefix:
            f.write(f"#endif\n")

def main() -> None:
    parser = argparse.ArgumentParser(description="Compile HLSL shaders to DXIL and SPIR-V")
    parser.add_argument("hlsl_file", help="Path to the HLSL shader file")
    parser.add_argument("entry", help="Shader entry point (e.g., VSMain, PSMain)")
    parser.add_argument("target", help="Shader target (e.g., vs_6_0, ps_6_0)")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument("-n", "--namespace", default="", help="Optional namespace for the generated header")
    parser.add_argument("-g", "--guard", default="", help="Optional C++ guard prefix for the header else \"pragma once\" is used")
    args = parser.parse_args()
    
    pathlib.Path("build").mkdir(exist_ok=True)
    shader_blobs = {}

    dxil_bytes = compile_shader(args.entry, args.target, "dxil", args.hlsl_file, args.verbose)
    spirv_bytes = compile_shader(args.entry, args.target, "spv", args.hlsl_file, args.verbose)

    shader_name = pathlib.Path(args.hlsl_file).stem
    shader_blobs[f"{shader_name}_dxil"] = dxil_bytes
    shader_blobs[f"{shader_name}_spirv"] = spirv_bytes

    output_header = pathlib.Path(args.hlsl_file).stem + ".h"
    emit_cpp_header(shader_blobs, output_header, args.namespace, args.guard)

if __name__ == "__main__":
    main()
